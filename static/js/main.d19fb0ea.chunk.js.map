{"version":3,"sources":["apiKeys.js","components/ForcastList.js","components/Map.js","images/WeatherIcons.gif","components/currentLocation.js","App.js","index.js"],"names":["module","exports","key","base","GoogleMapsAPI","ForcastList","weekDay","dt","Date","toLocaleString","weekday","className","this","props","forcastList","slice","map","day","src","weather","icon","alt","main","Math","round","temp","min","max","Component","Geocode","setApiKey","enableDebug","Map","AsyncMap","withScriptjs","withGoogleMap","google","defaultZoom","zoom","defaultCenter","center","onClose","onInfoWindowClose","position","lat","lng","style","padding","margin","city","onDragEnd","onMarkerDragEnd","draggable","name","undefined","googleMapURL","loadingElement","height","width","float","containerElement","boxShadow","marginTop","marginLeft","marginRight","mapElement","Weather","state","lon","temperatureC","temperatureF","cityName","country","humidity","description","visibility","sunrise","sunset","getPosition","options","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","getWeather","a","fetch","apiKeys","api_call","json","data","daily_api_call","dailyData","setState","daily","temp_min","temp_max","sys","search","axios","get","then","response","coord","catch","error","console","log","onChange","e","target","value","coords","latitude","longitude","err","alert","mapCall","Fragment","alignItem","justifyContent","type","id","placeholder","onClick","all","loader","WebkitUserDrag","color","fontSize","fontWeight","React","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d19fb0ea.chunk.js","sourcesContent":["// Visit https://api.openweathermap.org & then signup to get our API keys for free\nmodule.exports = {\n  key: \"fb728f680fda159b681bab8e48746f81\",\n  base: \"https://api.openweathermap.org/data/2.5/\",\n  GoogleMapsAPI : \"AIzaSyDmMlQ6O6EKpDFWREgk40WXNM4h1uCSEpM\",\n};\n","import React, { Component, Fragment } from \"react\";\r\nimport \"./ForcastList.css\";\r\n\r\nexport default class ForcastList extends Component {\r\n    \r\n    weekDay = (dt) => new Date(dt * 1000).toLocaleString(\"en-us\", {\r\n        weekday: \"long\"\r\n      });\r\n  render() {\r\n   \r\n    return (\r\n      <Fragment>\r\n         \r\n        \r\n        <div className='wrapper'>\r\n\r\n        {this.props.forcastList.slice(1, 7).map(day => (\r\n           \r\n            <div className='day'>\r\n                <div className=\"forcasting\">\r\n            <h2 className='date'>{this.weekDay(day.dt)}</h2>\r\n            <img\r\n              src={`http://openweathermap.org/img/w/${day.weather[0].icon}.png`}\r\n              alt=\"weather status icon\"\r\n            />\r\n    \r\n            <h2 className='main'>{day.weather[0].main}</h2>\r\n            <h3 className='tempM'>\r\n              <span>{Math.round(day.temp.min)}°</span> &nbsp;{\" \"}\r\n              <span> {Math.round(day.temp.max)}°</span>\r\n            </h3>\r\n            </div>\r\n          </div>\r\n        ))}\r\n        </div>\r\n    </Fragment>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\r\nimport Geocode from \"react-geocode\";\r\n//import Autocomplete from 'react-google-autocomplete';\r\nimport apiKeys, { GoogleMapsAPI } from '../apiKeys';\r\n//import apiKeys from '../apiKeys';\r\n//import axios from \"axios\";\r\n\r\nGeocode.setApiKey( GoogleMapsAPI );\r\nGeocode.enableDebug();\r\n\r\nclass Map extends Component{\r\n\r\n/* Google mapsApi is not free so i couldent finish all the fonctionalities\r\n\r\n\r\n\tconstructor( props ){\r\n\t\tsuper( props );\r\n\t\tthis.state = {\r\n\t\t\t\r\n\t\t\tmarkerPosition: {\r\n\t\t\t\tlat: this.props.center.lat,\r\n\t\t\t\tlng: this.props.center.lng\r\n\t\t\t},\r\n\t\t\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\r\n\r\n    onInfoWindowClose = (e) => {\r\n\r\n    }\r\n\r\n\tonMarkerDragEnd = ( event ) => {\r\n\t\tlet newLat = event.latLng.lat(),\r\n\t\t    newLng = event.latLng.lng();\r\n\r\n\t\tGeocode.fromLatLng( newLat , newLng ).then(\r\n\t\t\tresponse => {\r\n\t\t\t\t console.log(\"response\", response)\r\n\t\t\t\tthis.setState( {\r\n\t\t\t\t\t\r\n\t\t\t\t\tmarkerPosition: {\r\n\t\t\t\t\t\tlat: newLat,\r\n\t\t\t\t\t\tlng: newLng\r\n\t\t\t\t\t},\r\n\t\t\t\t\r\n\t\t\t\t} )\r\n\t\t\t},\r\n\t\t\terror => {\r\n\t\t\t\tconsole.error(error);\r\n\t\t\t}\r\n\t\t);\r\n\t};\r\n\tonPlaceSelected = async ( place ) => {\r\n\t\tconsole.log( 'plc', place );\r\n        await axios\r\n      .get(`${apiKeys.base}weather?q=${place.name}&units=metric&APPID=${apiKeys.key}`)\r\n      .then((response) => {\r\n\t\t \r\n        this.setState({\r\n\t\t\t\r\n\t\t\tmarkerPosition: {\r\n\t\t\t\tlat: response.data.coord.lat,\r\n\t\t\t\tlng: response.data.coord.lon\r\n\t\t\t},\r\n\t\t\t\r\n\t\t})\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n\r\n\t\t\r\n\t\t\r\n\t};\r\n\t*/\r\n\r\n\r\n\r\n\trender(){\r\n\t\tconst AsyncMap = withScriptjs(\r\n\t\t\twithGoogleMap(\r\n\t\t\t\tprops => (\r\n\t\t\t\t\t<GoogleMap google={ this.props.google }\r\n\t\t\t\t\t           defaultZoom={ this.props.zoom }\r\n\t\t\t\t\t           defaultCenter={this.props.center}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{/* InfoWindow on top of marker */}\r\n\t\t\t\t\t\t<InfoWindow\r\n\t\t\t\t\t\t\tonClose={this.onInfoWindowClose}\r\n\t\t\t\t\t\t\tposition={{lat: (this.props.center.lat +0.3 ), lng : this.props.center.lng} }\r\n                            \r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<span style={{ padding: 0, margin: 0 }}>{this.props.city}</span>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</InfoWindow>\r\n\t\t\t\t\t\t{/*Marker*/}\r\n\t\t\t\t\t\t<Marker google={this.props.google}\r\n\t\t\t\t\t\t       \r\n\t\t\t\t\t\t        \r\n\t\t\t\t\t\t      onDragEnd  ={ this.onMarkerDragEnd }\r\n\t\t\t\t\t\t\t\tdraggable={true}\r\n\t\t\t\t\t\t\t\tname=\"current place\"\r\n\t\t\t\t\t\t        position={this.props.center}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<Marker />\r\n\t\t\t\t\t\t{/* For Auto complete Search Box\t\r\n\t\t\t\t\t\t<Autocomplete\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\twidth: '100%',\r\n\t\t\t\t\t\t\t\theight: '40px',\r\n\t\t\t\t\t\t\t\tfloat:\"right\",\r\n\t\t\t\t\t\t\t\tpaddingLeft: '16px',\r\n\t\t\t\t\t\t\t\tmarginTop: '10px',\r\n\t\t\t\t\t\t\t\tmarginBottom: '10px'\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\tonPlaceSelected={ this.onPlaceSelected }\r\n\t\t\t\t\t\t\ttypes={['\r\n\t\t\t\t\t(regions)']}\r\n\t\t\t\t\t\t/> */}\r\n\t\t\t\t\t</GoogleMap>\r\n\t\t\t\t)\r\n\t\t\t)\r\n\t\t);\r\n\t\tlet map;\r\n\t\tif( this.props.center.lat !== undefined ) {\r\n\t\t\tmap = <div>\r\n\t\t\t\t\r\n\r\n\t\t\t\t<AsyncMap\r\n\t\t\t\t\tgoogleMapURL={`https://maps.googleapis.com/maps/api/js?key=${GoogleMapsAPI}&libraries=places`}\r\n\t\t\t\t\tloadingElement={\r\n\t\t\t\t\t\t<div style={{ height: `100%`, width:`100%`,float:\"right\" }} />\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcontainerElement={\r\n\t\t\t\t\t\t<div style={{boxShadow: \"1px 1px 5px 1px \",\r\n    \r\n\t\t\t\t\t\t\tmarginTop: \"25px\",marginLeft:\" 50px\",\r\n\t\t\t\t\t\t\tmarginRight: \"50px\",height: this.props.height , width: this.props.width,float:\"right\" }} />\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmapElement={\r\n\t\t\t\t\t\t<div style={{ height: `100%` , width:`100%`,float:\"right\"}} />\r\n\t\t\t\t\t}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t} else {\r\n\t\t\tmap = <div style={{height: this.props.height}} />\r\n\t\t}\r\n\t\treturn( map )\r\n\t}\r\n}\r\nexport default Map","export default __webpack_public_path__ + \"static/media/WeatherIcons.c90d089e.gif\";","import React from \"react\";\nimport apiKeys from \"../apiKeys\";\nimport axios from \"axios\";\nimport ForcastList from \"./ForcastList\";\nimport Map from \"./Map\";\n\nimport loader from \"../images/WeatherIcons.gif\";\n\n\nclass Weather extends React.Component {\n  state = {\n   \n    lat: undefined,\n    lon: undefined,\n\n    temperatureC: undefined,\n    temperatureF: undefined,\n    city: undefined,\n    cityName: \"\",\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    visibility: undefined,\n    icon: undefined,\n    sunrise: undefined,\n    sunset: undefined,\n    forcastList: undefined,\n  };\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      this.getPosition()\n        //If user allow location service then will fetch data & send it to get-weather function.\n        .then((position) => {\n          this.getWeather(position.coords.latitude, position.coords.longitude);\n        })\n        .catch((err) => {\n          //If user denied location service then standard location weather will le shown on basis of latitude & latitude.\n          this.getWeather(28.67, 77.22);\n          alert(\n            \"You have disabled location service. Allow 'This APP' to access your location. Your current location will be used for calculating Real time weather.\"\n          );\n        });\n    } else {\n      alert(\"Geolocation not available\");\n    }\n\n    \n  }\n\n\n  getPosition = (options) => {\n    return new Promise(function (resolve, reject) {\n      navigator.geolocation.getCurrentPosition(resolve, reject, options);\n    });\n  };\n\n  getWeather = async (lat, lon) => {\n    const api_call = await fetch(\n      `${apiKeys.base}weather?lat=${lat}&lon=${lon}&units=metric&APPID=${apiKeys.key}`\n    );\n    const data = await api_call.json();\n\n    const daily_api_call = await fetch(\n      `${apiKeys.base}onecall?lat=${lat}&lon=${lon}&units=metric&exclude=hourly,minutely,alerts&APPID=${apiKeys.key}`\n    );\n    const dailyData = await daily_api_call.json();\n\n    this.setState({\n      lat: lat,\n      lon: lon,\n      city: data.name,\n      forcastList: dailyData.daily,\n      icon: data.weather[0].icon,\n      temperatureC: Math.round(data.main.temp),\n      temperatureF: Math.round(data.main.temp * 1.8 + 32),\n      humidity: data.main.humidity,\n      visibility: data.visibility,\n      temp_min: Math.round(data.main.temp_min),\n      temp_max: Math.round(data.main.temp_max),\n      main: data.weather[0].main,\n      description: data.weather[0].description,\n      country: data.sys.country,\n    });\n  };\n\n  search = async (city) => {\n    await axios\n      .get(`${apiKeys.base}weather?q=${city}&units=metric&APPID=${apiKeys.key}`)\n      .then((response) => {\n        this.getWeather(response.data.coord.lat, response.data.coord.lon);\n        this.setState({ cityName: \"\"});\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n\n    \n  };\n  \n\n  onChange = (e) => {\n    this.setState({ [e.target.name]: e.target.value });\n    console.log(e.target.value);\n  };\n  render() {\n  \n    const { cityName,mapCall } = this.state;\n    if (this.state.temperatureC) {\n      return (\n      \n        <React.Fragment>\n         <div className='forecast'><div className=\"Myblock\" style={{width:\"50%\", alignItem:\"center\"}}>\n            <div className='search-box'>\n              <div\n                className='input-group mt-1 mb-1 py-0'\n                style={{ alignItem: \"center\", justifyContent: \"center\" }}\n              >\n                <div className='form-outline  '>\n                  <input\n                    type='search'\n                    id='form1'\n                    name='cityName'\n                    onChange={this.onChange}\n                    value={cityName}\n                    className='form-control'\n                    placeholder='Search a City'\n                  />\n                </div>\n                <button  type='button' onClick={() => this.search(cityName)} className='btn btn-primary'>\n                  <i className='fa fa-search'></i>\n                </button>\n              </div>\n              \n            </div>\n\n            <div className='title'>\n              <h2>{this.state.city} </h2>\n\n              <h3> , {this.state.country}</h3>\n            </div>\n            <div className='forecast-icon'>\n              <img\n                src={`http://openweathermap.org/img/w/${this.state.icon}.png`}\n                alt='weather status icon'\n              />\n              \n            </div><div className='temperature'>\n                <p id=\"temp\">{Math.round(this.state.temperatureC)}°c</p>\n                <p>\n                  <span>min : {Math.round(this.state.temp_min)}°</span>{\" \"}\n                  <span>max: {Math.round(this.state.temp_max)}°</span>&nbsp;\n                  <span>\n                    humididty : {Math.round(this.state.humidity)}°\n                  </span>{\" \"}\n                  <span>min : {Math.round(this.state.visibility)}°</span>\n                </p>\n              </div>\n            <div className='today-weather'>\n              <h3>{this.state.description}</h3>\n            </div>\n             <div style={{ margin: '100px' }}>\n\n             </div>\n\t\t\n\t\t\t</div>\t\n      <Map\n\t\t\t\t\tgoogle={this.props.google}\n\t\t\t\t\tcenter={{lat: this.state.lat, lng: this.state.lon}}\n          city={this.state.city}\n\t\t\t\t\theight='340px'\n          width=\"300px\"\n\t\t\t\t\tzoom={8}\n\t\t\t\t/> \n      \t\n          </div> \n\n\n          <ForcastList all={this.state} forcastList={this.state.forcastList} />\n\n         \n        </React.Fragment>\n      );\n    } else {\n      return (\n        <React.Fragment>\n          <img src={loader} style={{ width: \"50%\", WebkitUserDrag: \"none\" }} />\n          <h3 style={{ color: \"black\", fontSize: \"22px\", fontWeight: \"600\" }}>\n            Detecting your location\n          </h3>\n          <h3 style={{ color: \"black\", marginTop: \"10px\" }}>\n            Your current location wil be displayed on the App <br></br> & used\n            for calculating Real time weather.\n          </h3>\n        </React.Fragment>\n      );\n    }\n  }\n}\n\nexport default Weather;\n","import React from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport CurrentLocation from \"./components/currentLocation\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n  \n      <div className=\"container\">\n        <CurrentLocation />\n      </div>\n      \n  \n    </React.Fragment>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}